VUE 3 //////
// Создание
Можно создать разными способами, настройка самому или через vue/cli команда:
vue-create /имяпроекта/ или через VITE

///
<img src="./assets/logo.png"> поддерживается в компонентах такая запись, src будет указывать на файл
 который находится по пути в src

Во vue @ = алиас который указывает на src;
@/components
////

v-model=/имя поля с которым надо связать/ two-way binding

v-bind:/имя атрибута/="/поле с которым надо связать/" для привязки какиех то данных с компонентом
имя атрибута пример: href, id,value === v-bind:id=""
Короткая запись :bind ===v-bind

v-bind:class or :class можно создавать динамические классы пример:
:class="{'/имя класса/':todo.isCompleted}" если isCompleted = тру то данный класс примениться

v-html=/имя поля в данных/ чтобы вставить html разметку из данных

v-for="/имя для элемента in имя откуда брать этот элемент/" так же для каждого элемента должен быть задан key
пример: <li :key="/todo.id/" v-for="todo in todos">
              {{ todo.title }}
            </li>

v-once при добавлении данного атрибута для компонента все данные внутри не будут меняться, и будут отрисованы один раз, даже если соседние данные этого же компонента будут изменены, имхо как shouldComponentUpdate в реакте который возвращает true или фалсе
///

v-on:"/имя события/"="имя функции или тело функции" привязывает обработку события click,submit,mousemove
Пример: v-on:click="todos.push(какое то значение)" или v-on:click="addTodo"
v-on: === @ , можно писать @click, @dbclick

@submit.prevent preventDefault
stop stopPropaganation
capture добавляет слушатель события
self вызывает событие если именно он вызвался .currentTarget
once отработать событие только один раз
passive добавляет еще дополнительное событие поведение с поведением которое задано по умолчания
поддерживается запись @click.prevent.self
можно не передавать обработчик просто написат @submit.prevent

Клавишные события
@keyup.13 13===Enter будет срабатывать когда enter нажат
.enter === .13 === Нажать Enter
.delete = backspace || delete
.escape = Клавиши
.esc
.up
.down итд
config{
keyCodes:{
   "клавиша": код клавиши
   }
}
.клавиша ==== кастомное создание обработчика клавиши

computed методы должны возвращать результат вычисления и не должы быть undefined, и отрабатывают только тогда когда именно значение с которым оно работает изменилось на какое то другое, useMemo , или useCallback примерно)) у которых взависимости какое то значение,
computed методы один из способов применения, когда мы вызываем это свойство внутри компонента, и при отрисовке компонента нам
не нужно чтобы эта функция обратно вызвалась === мемоизация

/// Filters
 | json формирует json строку
